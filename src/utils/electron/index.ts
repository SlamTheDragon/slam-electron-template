// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

import * as packageJson from '../../../package.json'
import { app, BrowserWindow } from 'electron'
import { Logging } from './logging/logging'
import { Shutdown } from './shutdown'
import { Configure } from './configure'
import './ipc-main/ipc-on'


const logging = new Logging('main')
logging.info(`Starting Application ${packageJson.name} v${packageJson.version}...`)

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Create the main browser window.
export let mainWindow: BrowserWindow

async function createWindow() {
    mainWindow = new BrowserWindow({
        width: 1200,
        height: 750,
        // center: true,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    })
    // and load the index.html of the app.

    mainWindow.setMenuBarVisibility(false)
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)
}

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const foo = new Shutdown(0)
}

app.on('ready', async () => {
    logging.debug('attempting to create window')
    await createWindow()
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        return new Shutdown(0)
    }
})


// OS X
app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        logging.debug('attempting to create window')
        createWindow()
    }
})

process.on('uncaughtException', (error) => {
    logging.error(error)
})

// Start your methods here
Configure.Load()